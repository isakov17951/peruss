import { WordRepository } from '../repositories/WordRepository';
import { ERROR_MESSAGES, SEARCH_CONSTANTS } from '../constants/app';
import { createSuccess, createError, type AsyncResult } from '../types/common';
import type { Translation, Direction } from '../types/dictionary';
import type { WordWithTranslations } from '../types/database';


export class SearchService {
  /**
   * –ü–æ–∏—Å–∫ —Å fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
   */
  static async searchWithFallback(query: string, direction: Direction): AsyncResult<Translation> {
    if (!query.trim()) {
      return createError('–ü—É—Å—Ç–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å');
    }

    console.log('üéØ SearchService: Starting search for:', query, 'direction:', direction);

    try {
      const isRussian = direction === 'ru-fa';
      const { data: wordData, error } = await WordRepository.findWordWithTranslations(
        query.trim(), 
        isRussian
      );

      if (error) {
        console.error('üéØ SearchService: Repository error:', error);
        return createError(ERROR_MESSAGES.CONNECTION_ERROR, 'DB_ERROR');
      }

      if (!wordData) {
        // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –≤ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–∫ fallback
        console.log('üéØ SearchService: Trying fallback search...');
        const { data: fallbackData, error: fallbackError } = await WordRepository.findWordWithTranslations(
          query.trim(), 
          !isRussian
        );

        if (fallbackError || !fallbackData) {
          const errorMessage = direction === 'ru-fa' 
            ? ERROR_MESSAGES.WORD_NOT_FOUND 
            : ERROR_MESSAGES.WORD_NOT_FOUND_FA;
          return createError(errorMessage, 'WORD_NOT_FOUND');
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ
        const fallbackResult = this.formatSearchResult(fallbackData);
        console.log('‚úÖ SearchService: Fallback search successful');
        return createSuccess(fallbackResult);
      }

      // –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–π–¥–µ–Ω
      const result = this.formatSearchResult(wordData);
      console.log('‚úÖ SearchService: Search successful');
      return createSuccess(result);

    } catch (error) {
      console.error('üí• SearchService: Unexpected error:', error);
      return createError(ERROR_MESSAGES.GENERIC_ERROR, 'UNEXPECTED_ERROR');
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î –≤ —Ñ–æ—Ä–º–∞—Ç UI
   */
  static formatSearchResult(wordData: WordWithTranslations): Translation {
    console.log('üîÑ SearchService: Formatting result:', wordData);

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã
    const allExamples = (wordData.examples?.map(ex => ex.example_text) || [])
      .slice(0, SEARCH_CONSTANTS.MAX_EXAMPLES);

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã
    let definitions: string[] = [];
    
    if (wordData.translation) {
      definitions.push(wordData.translation);
    }
    
    if (wordData.translations && wordData.translations.length > 0) {
      const translationDefs = wordData.translations.map(translation => translation.definition);
      definitions.push(...translationDefs);
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (definitions.length === 0) {
      definitions = ['–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'];
    }

    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    definitions = [...new Set(definitions)];

    const result: Translation = {
      word: wordData.word,
      phonetic: wordData.phonetic || undefined,
      meanings: [{
        partOfSpeech: wordData.part_of_speech,
        definitions,
        examples: allExamples
      }]
    };

    console.log('‚úÖ SearchService: Formatted result:', result);
    return result;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
   */
  static async getSuggestions(query: string, direction: Direction): AsyncResult<string[]> {
    if (!query.trim()) {
      return createSuccess([]);
    }

    console.log('üîç SearchService: Getting suggestions for:', query, 'direction:', direction);

    try {
      const { data: suggestions, error } = await WordRepository.findSuggestions(
        query.trim(), 
        direction, 
        SEARCH_CONSTANTS.MAX_SUGGESTIONS
      );

      if (error) {
        console.error('‚ùå SearchService: Suggestions error:', error);
        return createError('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫', 'SUGGESTIONS_ERROR');
      }

      console.log('‚úÖ SearchService: Got suggestions:', suggestions?.length || 0);
      return createSuccess(suggestions || []);

    } catch (error) {
      console.error('üí• SearchService: Suggestions unexpected error:', error);
      return createError('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫', 'UNEXPECTED_ERROR');
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
   */
  static validateSearchQuery(query: string): { success: true; data: string } | { success: false; error: string; code?: string } {
    const trimmed = query.trim();
    
    if (!trimmed) {
      return createError('–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
    }

    if (trimmed.length < SEARCH_CONSTANTS.SEARCH_MIN_LENGTH) {
      return createError(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞: ${SEARCH_CONSTANTS.SEARCH_MIN_LENGTH} —Å–∏–º–≤–æ–ª`);
    }

    if (trimmed.length > 100) {
      return createError('–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å');
    }

    return createSuccess(trimmed);
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É
   */
  static detectLanguage(text: string): 'ru' | 'fa' | 'unknown' {
    const persianRegex = /[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF]/;
    const russianRegex = /[\u0400-\u04FF]/;

    if (persianRegex.test(text)) {
      return 'fa';
    } else if (russianRegex.test(text)) {
      return 'ru';
    }

    return 'unknown';
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
   */
  static async healthCheck(): AsyncResult<boolean> {
    try {
      const isHealthy = await WordRepository.healthCheck();
      return createSuccess(isHealthy);
    } catch (error) {
      console.error('üí• SearchService: Health check failed:', error);
      return createError('–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'SERVICE_UNAVAILABLE');
    }
  }
}